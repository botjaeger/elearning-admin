<?php
/**
 * Created by PhpStorm.
 * User: jarngotostos
 * Date: 10/28/18
 * Time: 4:33 PM
 */

namespace App\Controller\EasyAdmin;

use AlterPHP\EasyAdminExtensionBundle\Controller\AdminController;
use Symfony\Component\Form\Extension\Core\Type\DateType;
use Symfony\Component\Form\Extension\Core\Type\TextType;
use Symfony\Component\Security\Core\Encoder\UserPasswordEncoderInterface;

class StudentController extends  AdminController
{
    private $encoder;

    public function __construct(UserPasswordEncoderInterface $encoder)
    {
        $this->encoder = $encoder;
    }

    /**
     * Allows applications to modify the entity associated with the item being
     * created before persisting it.
     *
     * @param object $entity
     */
    protected function prePersistEntity($entity)
    {
        $entity
            ->setUuid(date('Y') . rand(0,500000))
            ->setRoles(['ROLE_STUDENT'])
            ->setIsActive(1)
            ->setPassword($this->encoder->encodePassword($entity, str_replace('-', '', $entity->getBirthday()->format("Y-m-d"))))
        ;

        return parent::prePersistEntity($entity);
    }

    /**
     * Allows applications to modify the entity associated with the item being
     * edited before persisting it.
     *
     * @param object $entity
     */
    protected function preUpdateEntity($entity)
    {
        return parent::preUpdateEntity($entity); // TODO: Change the autogenerated stub
    }

    /**
     * Creates Query Builder instance for all the records.
     *
     * @param string $entityClass
     * @param string $sortDirection
     * @param string|null $sortField
     * @param string|null $dqlFilter
     *
     * @return \Doctrine\ORM\QueryBuilder The Query Builder instance
     */
    protected function createListQueryBuilder($entityClass, $sortDirection, $sortField = null, $dqlFilter = null)
    {
        $user = $this->getUser();
        $qb = parent::createListQueryBuilder($entityClass, $sortDirection, $sortField, $dqlFilter);

        if ($user->getUserName() == 'admin') return $qb;

        $qb->where('entity.teacher = :teacher')
            ->setParameter('teacher', $user)
            ->addOrderBy('entity.id', 'DESC')
        ;

        return $qb;
    }

    /**
     * Creates the form builder of the form used to create or edit the given entity.
     *
     * @param object $entity
     * @param string $view The name of the view where this form is used ('new' or 'edit')
     *
     * @return FormBuilder
     */
    protected function createStudentEntityFormBuilder($entity, $view)
    {
        $builder =  parent::createEntityFormBuilder($entity, $view);

        // remove unnecessary fields
        $builder->remove('uuid')
            ->remove('isActive')
            ->remove('password')
            ->remove('attendance')
        ;

        $builder
            ->add('firstName', TextType::class, [
               'label' => 'First Name:',
               'required' => true
            ])
            ->add('middleName', TextType::class, [
                'label' => 'Middle Name:',
                'required' => false
            ])
            ->add('lastName', TextType::class, [
                'label' => 'Last Name:',
                'required' => true
            ])
            ->add('birthday', DateType::class, [
                'label' => 'Birthday:',
                'years' => range(date('Y')-4, date('Y')-8),
                'months' => range(1, 12),
                'days' => range(1, 31),
            ])
        ;

        return $builder;
    }
}
